## 現在の作業: 新規問題対応中（2025-08-08）

### 🚨 優先対応が必要な問題

#### 1. 入場予約で予約対象解除時の監視対象全削除問題（新規）
**症状**:
- 入場予約画面で予約対象を解除すると、監視対象もすべて解除される
- 期待動作：予約対象の解除は監視対象に影響を与えるべきではない

#### 2. スマホ環境での監視開始問題（新規）
**症状**:
- スマホで監視ボタン押下後、カウントダウンが開始しない
- デスクトップでは正常動作
- 監視処理自体の開始に問題がある可能性

#### 3. 同行者追加処理の入力認識問題（重要）- 未解決
**症状（5回目の報告）**:
- チケットIDを同行者追加画面で入力した直後で処理が止まる
- 入力欄に文字は表示されるが、入力値として認識されていない
- 一度文字を消してから再入力して送信する必要がある
- 手動で追加ボタンを押しても解決しない（追加ボタンの問題ではない）

**根本原因解明と修正内容（2025-08-08）**:
- **問題の特定**: DOMイベントシミュレーションではReactの制御されたコンポーネント（Controlled Component）のstate更新ができない
- **修正実装**: gemini -p推奨のReact onChangeハンドラ直接呼び出し方式
  1. React Fiber instanceから`onChange`ハンドラを取得
  2. Reactが期待するイベント形式（`{target: {value}}`）でモックイベント作成
  3. `onChange`ハンドラを直接実行してReact stateを更新
  4. フォールバック処理（従来のpasteイベント方式）
- **技術詳細**: React合成イベントシステムとControlled Componentの特性を考慮した根本的解決

#### 2. UI改善問題
- **入場予約画面**: disabledの満員ボタンと監視ボタンの見た目が同じで区別困難
- **改善案**: 灰色寄りにしても元の色の名残を出すべき

#### 3. 技術的クリーンアップ
- **main.ts**: 古いUserScriptHeaderが残存している可能性

### 最新完了作業: 状態管理統合 & FABクリーンアップ改善（2025-08-08）

#### 状態管理の完全統合
- **entranceReservationState** → EntranceReservationStateManager統合
- **timeSlotState** → EntranceReservationStateManager統合  
- **reloadCountdownState** → EntranceReservationStateManager統合
- **pageLoadingState** → EntranceReservationStateManager統合
- 4つの分散した状態管理を1つのクラスに統合、二重管理を完全解消

#### FABクリーンアップ機能改善
- ページ遷移時のFAB残存問題（特にスマホ）を修正
- `cleanupAllFABs()`統一関数実装
- 全FAB（入場予約、パビリオン、チケット選択）の一括削除
- モバイル向け遅延削除処理追加（100ms後の残存チェック）

### 完了した作業: CSS管理システム改善（2025-08-07）

#### Phase 1: 静的スタイルのSCSS移行（完了）
- cssText（29箇所）→ SCSSクラス化完了
- ヘッダートグル、パビリオンFAB、サブボタンのクラス化
- 階層構造による適切な詳細度管理（.ytomo-header、.ytomo-pavilion-fab）
- JavaScript display制御 → classList.toggle('js-hide')に変更

#### Phase 2: ホバーエフェクトのCSS移行（完了）
- ヘッダートグルボタン: JavaScript → CSS :hover
- パビリオンFABボタン: JavaScript → CSS :hover
- マウスイベントリスナー削除によるパフォーマンス改善

#### Phase 3: 動的制御部分のクラスベース管理（完了）
- JavaScript制御用の基本クラスセット作成
- .js-show/.js-hide、.js-enabled/.js-disabled
- .js-green/.js-red/.js-gray 状態管理クラス

### 技術的成果
- CSS管理の完全刷新: 直接スタイル操作からクラスベース管理へ
- 階層構造による詳細度管理: !important使用を最小化
- パフォーマンス改善: イベントリスナー削減
- 保守性向上: SCSS構造による統一的なスタイル管理

### 完了した前回作業: アーキテクチャリファクタリング（2025-08-07）
- 循環参照解決、監視継続失敗修正、UI改善完了
- 詳細は.doneファイル参照

---

## 参考: 過去の完了作業は .done ファイルを参照してください