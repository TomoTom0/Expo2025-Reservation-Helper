import type { CacheManager } from '../types/index.js';
export declare const setCacheManagerForSection6: (cm: CacheManager) => void;
export declare const setEntranceReservationHelper: (helper: Function) => void;
export declare const setCanStartReservation: (fn: Function) => void;
export declare const setUpdateMonitoringTargetsDisplay: (fn: Function) => void;
declare function getCurrentSelectedCalendarDate(): string | null;
declare function clickCalendarDate(targetDate: string): Promise<boolean>;
declare function tryClickCalendarForTimeSlot(): Promise<boolean>;
declare function showErrorMessage(message: string): void;
declare function resetMonitoringUI(): void;
declare function selectTimeSlotAndStartReservation(slotInfo: any): Promise<void>;
declare function stopSlotMonitoring(): void;
declare function getCurrentEntranceConfig(): any;
declare function resetPreviousSelection(): void;
declare function disableOtherMonitorButtons(selectedTimeText: string, selectedTdSelector: string): void;
declare function enableAllMonitorButtons(): void;
declare function disableAllMonitorButtons(): void;
declare function clearExistingMonitorButtons(): void;
declare function getCurrentTableContent(): string;
declare function shouldUpdateMonitorButtons(): boolean;
declare function restoreSelectionAfterUpdate(): void;
declare function updateMainButtonDisplay(forceMode?: string | null): void;
declare function getCurrentMode(): string;
declare function updateStatusBadge(mode: string): void;
declare function getTargetDisplayInfo(): string;
declare function startReloadCountdown(seconds?: number): void;
declare function stopReloadCountdown(): void;
declare function setPageLoadingState(isLoading: boolean): void;
declare function isInterruptionAllowed(): boolean;
declare function restoreFromCache(): Promise<void>;
export { getCurrentSelectedCalendarDate, clickCalendarDate, tryClickCalendarForTimeSlot, showErrorMessage, resetMonitoringUI, selectTimeSlotAndStartReservation, stopSlotMonitoring, getCurrentEntranceConfig, resetPreviousSelection, disableOtherMonitorButtons, enableAllMonitorButtons, disableAllMonitorButtons, clearExistingMonitorButtons, getCurrentTableContent, shouldUpdateMonitorButtons, restoreSelectionAfterUpdate, updateMainButtonDisplay, getCurrentMode, updateStatusBadge, getTargetDisplayInfo, startReloadCountdown, stopReloadCountdown, setPageLoadingState, isInterruptionAllowed, restoreFromCache };
